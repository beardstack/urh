/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7 */

#ifndef PB_CC11011_CC1101_PB_H_INCLUDED
#define PB_CC11011_CC1101_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _cc11011_FrequencyUnit {
    cc11011_FrequencyUnit_FREQUENCY_UNIT_UNSPECIFIED = 0,
    cc11011_FrequencyUnit_FREQUENCY_UNIT_HZ = 1,
    cc11011_FrequencyUnit_FREQUENCY_UNIT_KHZ = 2,
    cc11011_FrequencyUnit_FREQUENCY_UNIT_MHZ = 3,
    cc11011_FrequencyUnit_FREQUENCY_UNIT_GHZ = 4
} cc11011_FrequencyUnit;

typedef enum _cc11011_Modulation {
    cc11011_Modulation_MODULATION_TYPE_UNSPECIFIED = 0,
    cc11011_Modulation_MODULATION_TYPE_ASK = 1,
    cc11011_Modulation_MODULATION_TYPE_FSK = 2,
    cc11011_Modulation_MODULATION_TYPE_PSK = 3
} cc11011_Modulation;

typedef enum _cc11011_BitrateUnit {
    cc11011_BitrateUnit_BITRATE_UNIT_UNSPECIFIED = 0,
    cc11011_BitrateUnit_BITRATE_UNIT_BPS = 1,
    cc11011_BitrateUnit_BITRATE_UNIT_KBPS = 2,
    cc11011_BitrateUnit_BITRATE_UNIT_MBPS = 3
} cc11011_BitrateUnit;

typedef enum _cc11011_PowerSetting {
    cc11011_PowerSetting_POWER_SETTING_UNSPECIFIED = 0,
    cc11011_PowerSetting_POWER_SETTING_MINUS_30_DBM = 1,
    cc11011_PowerSetting_POWER_SETTING_MINUS_20_DBM = 2,
    cc11011_PowerSetting_POWER_SETTING_MINUS_15_DBM = 3,
    cc11011_PowerSetting_POWER_SETTING_MINUS_10_DBM = 4,
    cc11011_PowerSetting_POWER_SETTING_ZERO_DBM = 5,
    cc11011_PowerSetting_POWER_SETTING_FIVE_DBM = 6,
    cc11011_PowerSetting_POWER_SETTING_SEVEN_DBM = 7,
    cc11011_PowerSetting_POWER_SETTING_TEN_DBM = 8
} cc11011_PowerSetting;

typedef enum _cc11011_EncodingFormat {
    cc11011_EncodingFormat_ENCODING_FORMAT_UNSPECIFIED = 0,
    cc11011_EncodingFormat_ENCODING_FORMAT_NRZ = 1,
    cc11011_EncodingFormat_ENCODING_FORMAT_NRZ_INVERT = 2,
    cc11011_EncodingFormat_ENCODING_FORMAT_MANCHESTER_1 = 3,
    cc11011_EncodingFormat_ENCODING_FORMAT_MANCHESTER_2 = 4,
    cc11011_EncodingFormat_ENCODING_FORMAT_DIFF_MANCHESTER = 5,
    cc11011_EncodingFormat_ENCODING_FORMAT_WHITENING = 6
} cc11011_EncodingFormat;

/* Struct definitions */
typedef struct _cc11011_Message {
    bool has_beginning_pause_ms;
    int32_t beginning_pause_ms;
    bool has_end_pause_ms;
    int32_t end_pause_ms;
    pb_callback_t data;
    int32_t length;
} cc11011_Message;

typedef struct _cc11011_SyncWord {
    pb_callback_t data;
    int32_t length;
    bool has_max_err_bits;
    int32_t max_err_bits;
} cc11011_SyncWord;

typedef struct _cc11011_Node {
    pb_callback_t addresses;
    int32_t num_broadcast_addrs;
} cc11011_Node;

typedef struct _cc11011_Signal {
    pb_callback_t name;
    float freq;
    cc11011_FrequencyUnit freq_unit;
    float bitrate;
    cc11011_BitrateUnit bitrate_unit;
    bool has_deviation;
    float deviation;
    bool has_rx_bw;
    float rx_bw;
    bool has_power;
    cc11011_PowerSetting power;
    bool has_modulation;
    cc11011_Modulation modulation;
    pb_callback_t messages;
    bool has_encoding;
    cc11011_EncodingFormat encoding;
    bool has_enable_carrier_sense;
    bool enable_carrier_sense;
    bool has_enable_ook;
    bool enable_ook;
    bool has_enable_crc_filtering;
    bool enable_crc_filtering;
    bool has_data_shaping;
    int32_t data_shaping;
    bool has_node_address;
    cc11011_Node node_address;
    pb_callback_t comment;
} cc11011_Signal;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _cc11011_FrequencyUnit_MIN cc11011_FrequencyUnit_FREQUENCY_UNIT_UNSPECIFIED
#define _cc11011_FrequencyUnit_MAX cc11011_FrequencyUnit_FREQUENCY_UNIT_GHZ
#define _cc11011_FrequencyUnit_ARRAYSIZE ((cc11011_FrequencyUnit)(cc11011_FrequencyUnit_FREQUENCY_UNIT_GHZ+1))

#define _cc11011_Modulation_MIN cc11011_Modulation_MODULATION_TYPE_UNSPECIFIED
#define _cc11011_Modulation_MAX cc11011_Modulation_MODULATION_TYPE_PSK
#define _cc11011_Modulation_ARRAYSIZE ((cc11011_Modulation)(cc11011_Modulation_MODULATION_TYPE_PSK+1))

#define _cc11011_BitrateUnit_MIN cc11011_BitrateUnit_BITRATE_UNIT_UNSPECIFIED
#define _cc11011_BitrateUnit_MAX cc11011_BitrateUnit_BITRATE_UNIT_MBPS
#define _cc11011_BitrateUnit_ARRAYSIZE ((cc11011_BitrateUnit)(cc11011_BitrateUnit_BITRATE_UNIT_MBPS+1))

#define _cc11011_PowerSetting_MIN cc11011_PowerSetting_POWER_SETTING_UNSPECIFIED
#define _cc11011_PowerSetting_MAX cc11011_PowerSetting_POWER_SETTING_TEN_DBM
#define _cc11011_PowerSetting_ARRAYSIZE ((cc11011_PowerSetting)(cc11011_PowerSetting_POWER_SETTING_TEN_DBM+1))

#define _cc11011_EncodingFormat_MIN cc11011_EncodingFormat_ENCODING_FORMAT_UNSPECIFIED
#define _cc11011_EncodingFormat_MAX cc11011_EncodingFormat_ENCODING_FORMAT_WHITENING
#define _cc11011_EncodingFormat_ARRAYSIZE ((cc11011_EncodingFormat)(cc11011_EncodingFormat_ENCODING_FORMAT_WHITENING+1))




#define cc11011_Signal_freq_unit_ENUMTYPE cc11011_FrequencyUnit
#define cc11011_Signal_bitrate_unit_ENUMTYPE cc11011_BitrateUnit
#define cc11011_Signal_power_ENUMTYPE cc11011_PowerSetting
#define cc11011_Signal_modulation_ENUMTYPE cc11011_Modulation
#define cc11011_Signal_encoding_ENUMTYPE cc11011_EncodingFormat


/* Initializer values for message structs */
#define cc11011_Message_init_default             {false, 0, false, 0, {{NULL}, NULL}, 0}
#define cc11011_SyncWord_init_default            {{{NULL}, NULL}, 0, false, 0}
#define cc11011_Node_init_default                {{{NULL}, NULL}, 0}
#define cc11011_Signal_init_default              {{{NULL}, NULL}, 433.92f, cc11011_FrequencyUnit_FREQUENCY_UNIT_MHZ, 600.0f, cc11011_BitrateUnit_BITRATE_UNIT_KBPS, false, 0, false, 0, false, cc11011_PowerSetting_POWER_SETTING_SEVEN_DBM, false, cc11011_Modulation_MODULATION_TYPE_ASK, {{NULL}, NULL}, false, cc11011_EncodingFormat_ENCODING_FORMAT_NRZ, false, 0, false, 0, false, 0, false, 0, false, cc11011_Node_init_default, {{NULL}, NULL}}
#define cc11011_Message_init_zero                {false, 0, false, 0, {{NULL}, NULL}, 0}
#define cc11011_SyncWord_init_zero               {{{NULL}, NULL}, 0, false, 0}
#define cc11011_Node_init_zero                   {{{NULL}, NULL}, 0}
#define cc11011_Signal_init_zero                 {{{NULL}, NULL}, 0, _cc11011_FrequencyUnit_MIN, 0, _cc11011_BitrateUnit_MIN, false, 0, false, 0, false, _cc11011_PowerSetting_MIN, false, _cc11011_Modulation_MIN, {{NULL}, NULL}, false, _cc11011_EncodingFormat_MIN, false, 0, false, 0, false, 0, false, 0, false, cc11011_Node_init_zero, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define cc11011_Message_beginning_pause_ms_tag   1
#define cc11011_Message_end_pause_ms_tag         2
#define cc11011_Message_data_tag                 3
#define cc11011_Message_length_tag               4
#define cc11011_SyncWord_data_tag                1
#define cc11011_SyncWord_length_tag              2
#define cc11011_SyncWord_max_err_bits_tag        3
#define cc11011_Node_addresses_tag               1
#define cc11011_Node_num_broadcast_addrs_tag     2
#define cc11011_Signal_name_tag                  1
#define cc11011_Signal_freq_tag                  2
#define cc11011_Signal_freq_unit_tag             3
#define cc11011_Signal_bitrate_tag               4
#define cc11011_Signal_bitrate_unit_tag          5
#define cc11011_Signal_deviation_tag             6
#define cc11011_Signal_rx_bw_tag                 7
#define cc11011_Signal_power_tag                 8
#define cc11011_Signal_modulation_tag            9
#define cc11011_Signal_messages_tag              10
#define cc11011_Signal_encoding_tag              11
#define cc11011_Signal_enable_carrier_sense_tag  12
#define cc11011_Signal_enable_ook_tag            13
#define cc11011_Signal_enable_crc_filtering_tag  14
#define cc11011_Signal_data_shaping_tag          15
#define cc11011_Signal_node_address_tag          16
#define cc11011_Signal_comment_tag               17

/* Struct field encoding specification for nanopb */
#define cc11011_Message_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    beginning_pause_ms,   1) \
X(a, STATIC,   OPTIONAL, INT32,    end_pause_ms,      2) \
X(a, CALLBACK, REPEATED, INT32,    data,              3) \
X(a, STATIC,   REQUIRED, INT32,    length,            4)
#define cc11011_Message_CALLBACK pb_default_field_callback
#define cc11011_Message_DEFAULT (const pb_byte_t*)"\x08\x00\x10\x00\x20\x00\x00"

#define cc11011_SyncWord_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, INT32,    data,              1) \
X(a, STATIC,   REQUIRED, INT32,    length,            2) \
X(a, STATIC,   OPTIONAL, INT32,    max_err_bits,      3)
#define cc11011_SyncWord_CALLBACK pb_default_field_callback
#define cc11011_SyncWord_DEFAULT NULL

#define cc11011_Node_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, INT32,    addresses,         1) \
X(a, STATIC,   REQUIRED, INT32,    num_broadcast_addrs,   2)
#define cc11011_Node_CALLBACK pb_default_field_callback
#define cc11011_Node_DEFAULT (const pb_byte_t*)"\x10\x00\x00"

#define cc11011_Signal_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   name,              1) \
X(a, STATIC,   REQUIRED, FLOAT,    freq,              2) \
X(a, STATIC,   REQUIRED, UENUM,    freq_unit,         3) \
X(a, STATIC,   REQUIRED, FLOAT,    bitrate,           4) \
X(a, STATIC,   REQUIRED, UENUM,    bitrate_unit,      5) \
X(a, STATIC,   OPTIONAL, FLOAT,    deviation,         6) \
X(a, STATIC,   OPTIONAL, FLOAT,    rx_bw,             7) \
X(a, STATIC,   OPTIONAL, UENUM,    power,             8) \
X(a, STATIC,   OPTIONAL, UENUM,    modulation,        9) \
X(a, CALLBACK, REPEATED, MESSAGE,  messages,         10) \
X(a, STATIC,   OPTIONAL, UENUM,    encoding,         11) \
X(a, STATIC,   OPTIONAL, BOOL,     enable_carrier_sense,  12) \
X(a, STATIC,   OPTIONAL, BOOL,     enable_ook,       13) \
X(a, STATIC,   OPTIONAL, BOOL,     enable_crc_filtering,  14) \
X(a, STATIC,   OPTIONAL, INT32,    data_shaping,     15) \
X(a, STATIC,   OPTIONAL, MESSAGE,  node_address,     16) \
X(a, CALLBACK, OPTIONAL, STRING,   comment,          17)
#define cc11011_Signal_CALLBACK pb_default_field_callback
#define cc11011_Signal_DEFAULT (const pb_byte_t*)"\x15\xc3\xf5\xd8\x43\x18\x03\x25\x00\x00\x16\x44\x28\x02\x40\x07\x48\x01\x58\x01\x00"
#define cc11011_Signal_messages_MSGTYPE cc11011_Message
#define cc11011_Signal_node_address_MSGTYPE cc11011_Node

extern const pb_msgdesc_t cc11011_Message_msg;
extern const pb_msgdesc_t cc11011_SyncWord_msg;
extern const pb_msgdesc_t cc11011_Node_msg;
extern const pb_msgdesc_t cc11011_Signal_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define cc11011_Message_fields &cc11011_Message_msg
#define cc11011_SyncWord_fields &cc11011_SyncWord_msg
#define cc11011_Node_fields &cc11011_Node_msg
#define cc11011_Signal_fields &cc11011_Signal_msg

/* Maximum encoded size of messages (where known) */
/* cc11011_Message_size depends on runtime parameters */
/* cc11011_SyncWord_size depends on runtime parameters */
/* cc11011_Node_size depends on runtime parameters */
/* cc11011_Signal_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
