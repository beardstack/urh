// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cc1101.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cc1101_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cc1101_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cc1101_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cc1101_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cc1101_2eproto;
namespace cc11011 {
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Node;
struct NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class Signal;
struct SignalDefaultTypeInternal;
extern SignalDefaultTypeInternal _Signal_default_instance_;
class SyncWord;
struct SyncWordDefaultTypeInternal;
extern SyncWordDefaultTypeInternal _SyncWord_default_instance_;
}  // namespace cc11011
PROTOBUF_NAMESPACE_OPEN
template<> ::cc11011::Message* Arena::CreateMaybeMessage<::cc11011::Message>(Arena*);
template<> ::cc11011::Node* Arena::CreateMaybeMessage<::cc11011::Node>(Arena*);
template<> ::cc11011::Signal* Arena::CreateMaybeMessage<::cc11011::Signal>(Arena*);
template<> ::cc11011::SyncWord* Arena::CreateMaybeMessage<::cc11011::SyncWord>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cc11011 {

enum FrequencyUnit : int {
  FREQUENCY_UNIT_UNSPECIFIED = 0,
  FREQUENCY_UNIT_HZ = 1,
  FREQUENCY_UNIT_KHZ = 2,
  FREQUENCY_UNIT_MHZ = 3,
  FREQUENCY_UNIT_GHZ = 4
};
bool FrequencyUnit_IsValid(int value);
constexpr FrequencyUnit FrequencyUnit_MIN = FREQUENCY_UNIT_UNSPECIFIED;
constexpr FrequencyUnit FrequencyUnit_MAX = FREQUENCY_UNIT_GHZ;
constexpr int FrequencyUnit_ARRAYSIZE = FrequencyUnit_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FrequencyUnit_descriptor();
template<typename T>
inline const std::string& FrequencyUnit_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FrequencyUnit>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FrequencyUnit_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FrequencyUnit_descriptor(), enum_t_value);
}
inline bool FrequencyUnit_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FrequencyUnit* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FrequencyUnit>(
    FrequencyUnit_descriptor(), name, value);
}
enum Modulation : int {
  MODULATION_TYPE_UNSPECIFIED = 0,
  MODULATION_TYPE_ASK = 1,
  MODULATION_TYPE_FSK = 2,
  MODULATION_TYPE_PSK = 3
};
bool Modulation_IsValid(int value);
constexpr Modulation Modulation_MIN = MODULATION_TYPE_UNSPECIFIED;
constexpr Modulation Modulation_MAX = MODULATION_TYPE_PSK;
constexpr int Modulation_ARRAYSIZE = Modulation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Modulation_descriptor();
template<typename T>
inline const std::string& Modulation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Modulation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Modulation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Modulation_descriptor(), enum_t_value);
}
inline bool Modulation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Modulation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Modulation>(
    Modulation_descriptor(), name, value);
}
enum BitrateUnit : int {
  BITRATE_UNIT_UNSPECIFIED = 0,
  BITRATE_UNIT_BPS = 1,
  BITRATE_UNIT_KBPS = 2,
  BITRATE_UNIT_MBPS = 3
};
bool BitrateUnit_IsValid(int value);
constexpr BitrateUnit BitrateUnit_MIN = BITRATE_UNIT_UNSPECIFIED;
constexpr BitrateUnit BitrateUnit_MAX = BITRATE_UNIT_MBPS;
constexpr int BitrateUnit_ARRAYSIZE = BitrateUnit_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BitrateUnit_descriptor();
template<typename T>
inline const std::string& BitrateUnit_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BitrateUnit>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BitrateUnit_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BitrateUnit_descriptor(), enum_t_value);
}
inline bool BitrateUnit_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BitrateUnit* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BitrateUnit>(
    BitrateUnit_descriptor(), name, value);
}
enum PowerSetting : int {
  POWER_SETTING_UNSPECIFIED = 0,
  POWER_SETTING_MINUS_30_DBM = 1,
  POWER_SETTING_MINUS_20_DBM = 2,
  POWER_SETTING_MINUS_15_DBM = 3,
  POWER_SETTING_MINUS_10_DBM = 4,
  POWER_SETTING_ZERO_DBM = 5,
  POWER_SETTING_FIVE_DBM = 6,
  POWER_SETTING_SEVEN_DBM = 7,
  POWER_SETTING_TEN_DBM = 8
};
bool PowerSetting_IsValid(int value);
constexpr PowerSetting PowerSetting_MIN = POWER_SETTING_UNSPECIFIED;
constexpr PowerSetting PowerSetting_MAX = POWER_SETTING_TEN_DBM;
constexpr int PowerSetting_ARRAYSIZE = PowerSetting_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PowerSetting_descriptor();
template<typename T>
inline const std::string& PowerSetting_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PowerSetting>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PowerSetting_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PowerSetting_descriptor(), enum_t_value);
}
inline bool PowerSetting_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PowerSetting* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PowerSetting>(
    PowerSetting_descriptor(), name, value);
}
enum EncodingFormat : int {
  ENCODING_FORMAT_UNSPECIFIED = 0,
  ENCODING_FORMAT_NRZ = 1,
  ENCODING_FORMAT_NRZ_INVERT = 2,
  ENCODING_FORMAT_MANCHESTER_1 = 3,
  ENCODING_FORMAT_MANCHESTER_2 = 4,
  ENCODING_FORMAT_DIFF_MANCHESTER = 5,
  ENCODING_FORMAT_WHITENING = 6
};
bool EncodingFormat_IsValid(int value);
constexpr EncodingFormat EncodingFormat_MIN = ENCODING_FORMAT_UNSPECIFIED;
constexpr EncodingFormat EncodingFormat_MAX = ENCODING_FORMAT_WHITENING;
constexpr int EncodingFormat_ARRAYSIZE = EncodingFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EncodingFormat_descriptor();
template<typename T>
inline const std::string& EncodingFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EncodingFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EncodingFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EncodingFormat_descriptor(), enum_t_value);
}
inline bool EncodingFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EncodingFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EncodingFormat>(
    EncodingFormat_descriptor(), name, value);
}
// ===================================================================

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cc11011.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  explicit PROTOBUF_CONSTEXPR Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Message& from) {
    Message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cc11011.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kBeginningPauseMsFieldNumber = 1,
    kEndPauseMsFieldNumber = 2,
    kLengthFieldNumber = 4,
  };
  // repeated int32 data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  int32_t _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_data() const;
  void _internal_add_data(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_data();
  public:
  int32_t data(int index) const;
  void set_data(int index, int32_t value);
  void add_data(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_data();

  // optional int32 beginning_pause_ms = 1 [default = 0];
  bool has_beginning_pause_ms() const;
  private:
  bool _internal_has_beginning_pause_ms() const;
  public:
  void clear_beginning_pause_ms();
  int32_t beginning_pause_ms() const;
  void set_beginning_pause_ms(int32_t value);
  private:
  int32_t _internal_beginning_pause_ms() const;
  void _internal_set_beginning_pause_ms(int32_t value);
  public:

  // optional int32 end_pause_ms = 2 [default = 0];
  bool has_end_pause_ms() const;
  private:
  bool _internal_has_end_pause_ms() const;
  public:
  void clear_end_pause_ms();
  int32_t end_pause_ms() const;
  void set_end_pause_ms(int32_t value);
  private:
  int32_t _internal_end_pause_ms() const;
  void _internal_set_end_pause_ms(int32_t value);
  public:

  // required int32 length = 4 [default = 0];
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  int32_t length() const;
  void set_length(int32_t value);
  private:
  int32_t _internal_length() const;
  void _internal_set_length(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cc11011.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > data_;
    int32_t beginning_pause_ms_;
    int32_t end_pause_ms_;
    int32_t length_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cc1101_2eproto;
};
// -------------------------------------------------------------------

class SyncWord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cc11011.SyncWord) */ {
 public:
  inline SyncWord() : SyncWord(nullptr) {}
  ~SyncWord() override;
  explicit PROTOBUF_CONSTEXPR SyncWord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncWord(const SyncWord& from);
  SyncWord(SyncWord&& from) noexcept
    : SyncWord() {
    *this = ::std::move(from);
  }

  inline SyncWord& operator=(const SyncWord& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncWord& operator=(SyncWord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncWord& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncWord* internal_default_instance() {
    return reinterpret_cast<const SyncWord*>(
               &_SyncWord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SyncWord& a, SyncWord& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncWord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncWord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncWord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncWord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncWord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncWord& from) {
    SyncWord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncWord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cc11011.SyncWord";
  }
  protected:
  explicit SyncWord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kLengthFieldNumber = 2,
    kMaxErrBitsFieldNumber = 3,
  };
  // repeated int32 data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  int32_t _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_data() const;
  void _internal_add_data(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_data();
  public:
  int32_t data(int index) const;
  void set_data(int index, int32_t value);
  void add_data(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_data();

  // required int32 length = 2;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  int32_t length() const;
  void set_length(int32_t value);
  private:
  int32_t _internal_length() const;
  void _internal_set_length(int32_t value);
  public:

  // optional int32 max_err_bits = 3;
  bool has_max_err_bits() const;
  private:
  bool _internal_has_max_err_bits() const;
  public:
  void clear_max_err_bits();
  int32_t max_err_bits() const;
  void set_max_err_bits(int32_t value);
  private:
  int32_t _internal_max_err_bits() const;
  void _internal_set_max_err_bits(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cc11011.SyncWord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > data_;
    int32_t length_;
    int32_t max_err_bits_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cc1101_2eproto;
};
// -------------------------------------------------------------------

class Node final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cc11011.Node) */ {
 public:
  inline Node() : Node(nullptr) {}
  ~Node() override;
  explicit PROTOBUF_CONSTEXPR Node(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Node& default_instance() {
    return *internal_default_instance();
  }
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Node& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Node& from) {
    Node::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cc11011.Node";
  }
  protected:
  explicit Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressesFieldNumber = 1,
    kNumBroadcastAddrsFieldNumber = 2,
  };
  // repeated int32 addresses = 1;
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;
  public:
  void clear_addresses();
  private:
  int32_t _internal_addresses(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_addresses() const;
  void _internal_add_addresses(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_addresses();
  public:
  int32_t addresses(int index) const;
  void set_addresses(int index, int32_t value);
  void add_addresses(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_addresses();

  // required int32 num_broadcast_addrs = 2 [default = 0];
  bool has_num_broadcast_addrs() const;
  private:
  bool _internal_has_num_broadcast_addrs() const;
  public:
  void clear_num_broadcast_addrs();
  int32_t num_broadcast_addrs() const;
  void set_num_broadcast_addrs(int32_t value);
  private:
  int32_t _internal_num_broadcast_addrs() const;
  void _internal_set_num_broadcast_addrs(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cc11011.Node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > addresses_;
    int32_t num_broadcast_addrs_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cc1101_2eproto;
};
// -------------------------------------------------------------------

class Signal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cc11011.Signal) */ {
 public:
  inline Signal() : Signal(nullptr) {}
  ~Signal() override;
  explicit PROTOBUF_CONSTEXPR Signal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Signal(const Signal& from);
  Signal(Signal&& from) noexcept
    : Signal() {
    *this = ::std::move(from);
  }

  inline Signal& operator=(const Signal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signal& operator=(Signal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Signal& default_instance() {
    return *internal_default_instance();
  }
  static inline const Signal* internal_default_instance() {
    return reinterpret_cast<const Signal*>(
               &_Signal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Signal& a, Signal& b) {
    a.Swap(&b);
  }
  inline void Swap(Signal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Signal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Signal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Signal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Signal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Signal& from) {
    Signal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cc11011.Signal";
  }
  protected:
  explicit Signal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 10,
    kNameFieldNumber = 1,
    kCommentFieldNumber = 17,
    kNodeAddressFieldNumber = 16,
    kDeviationFieldNumber = 6,
    kRxBwFieldNumber = 7,
    kEnableCarrierSenseFieldNumber = 12,
    kEnableOokFieldNumber = 13,
    kEnableCrcFilteringFieldNumber = 14,
    kDataShapingFieldNumber = 15,
    kEncodingFieldNumber = 11,
    kFreqFieldNumber = 2,
    kFreqUnitFieldNumber = 3,
    kBitrateFieldNumber = 4,
    kBitrateUnitFieldNumber = 5,
    kPowerFieldNumber = 8,
    kModulationFieldNumber = 9,
  };
  // repeated .cc11011.Message messages = 10;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::cc11011::Message* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cc11011::Message >*
      mutable_messages();
  private:
  const ::cc11011::Message& _internal_messages(int index) const;
  ::cc11011::Message* _internal_add_messages();
  public:
  const ::cc11011::Message& messages(int index) const;
  ::cc11011::Message* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cc11011::Message >&
      messages() const;

  // required string name = 1 [default = "default_signal"];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string comment = 17;
  bool has_comment() const;
  private:
  bool _internal_has_comment() const;
  public:
  void clear_comment();
  const std::string& comment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_comment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_comment();
  PROTOBUF_NODISCARD std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // optional .cc11011.Node node_address = 16;
  bool has_node_address() const;
  private:
  bool _internal_has_node_address() const;
  public:
  void clear_node_address();
  const ::cc11011::Node& node_address() const;
  PROTOBUF_NODISCARD ::cc11011::Node* release_node_address();
  ::cc11011::Node* mutable_node_address();
  void set_allocated_node_address(::cc11011::Node* node_address);
  private:
  const ::cc11011::Node& _internal_node_address() const;
  ::cc11011::Node* _internal_mutable_node_address();
  public:
  void unsafe_arena_set_allocated_node_address(
      ::cc11011::Node* node_address);
  ::cc11011::Node* unsafe_arena_release_node_address();

  // optional float deviation = 6;
  bool has_deviation() const;
  private:
  bool _internal_has_deviation() const;
  public:
  void clear_deviation();
  float deviation() const;
  void set_deviation(float value);
  private:
  float _internal_deviation() const;
  void _internal_set_deviation(float value);
  public:

  // optional float rx_bw = 7;
  bool has_rx_bw() const;
  private:
  bool _internal_has_rx_bw() const;
  public:
  void clear_rx_bw();
  float rx_bw() const;
  void set_rx_bw(float value);
  private:
  float _internal_rx_bw() const;
  void _internal_set_rx_bw(float value);
  public:

  // optional bool enable_carrier_sense = 12;
  bool has_enable_carrier_sense() const;
  private:
  bool _internal_has_enable_carrier_sense() const;
  public:
  void clear_enable_carrier_sense();
  bool enable_carrier_sense() const;
  void set_enable_carrier_sense(bool value);
  private:
  bool _internal_enable_carrier_sense() const;
  void _internal_set_enable_carrier_sense(bool value);
  public:

  // optional bool enable_ook = 13;
  bool has_enable_ook() const;
  private:
  bool _internal_has_enable_ook() const;
  public:
  void clear_enable_ook();
  bool enable_ook() const;
  void set_enable_ook(bool value);
  private:
  bool _internal_enable_ook() const;
  void _internal_set_enable_ook(bool value);
  public:

  // optional bool enable_crc_filtering = 14;
  bool has_enable_crc_filtering() const;
  private:
  bool _internal_has_enable_crc_filtering() const;
  public:
  void clear_enable_crc_filtering();
  bool enable_crc_filtering() const;
  void set_enable_crc_filtering(bool value);
  private:
  bool _internal_enable_crc_filtering() const;
  void _internal_set_enable_crc_filtering(bool value);
  public:

  // optional int32 data_shaping = 15;
  bool has_data_shaping() const;
  private:
  bool _internal_has_data_shaping() const;
  public:
  void clear_data_shaping();
  int32_t data_shaping() const;
  void set_data_shaping(int32_t value);
  private:
  int32_t _internal_data_shaping() const;
  void _internal_set_data_shaping(int32_t value);
  public:

  // optional .cc11011.EncodingFormat encoding = 11 [default = ENCODING_FORMAT_NRZ];
  bool has_encoding() const;
  private:
  bool _internal_has_encoding() const;
  public:
  void clear_encoding();
  ::cc11011::EncodingFormat encoding() const;
  void set_encoding(::cc11011::EncodingFormat value);
  private:
  ::cc11011::EncodingFormat _internal_encoding() const;
  void _internal_set_encoding(::cc11011::EncodingFormat value);
  public:

  // required float freq = 2 [default = 433.92];
  bool has_freq() const;
  private:
  bool _internal_has_freq() const;
  public:
  void clear_freq();
  float freq() const;
  void set_freq(float value);
  private:
  float _internal_freq() const;
  void _internal_set_freq(float value);
  public:

  // required .cc11011.FrequencyUnit freq_unit = 3 [default = FREQUENCY_UNIT_MHZ];
  bool has_freq_unit() const;
  private:
  bool _internal_has_freq_unit() const;
  public:
  void clear_freq_unit();
  ::cc11011::FrequencyUnit freq_unit() const;
  void set_freq_unit(::cc11011::FrequencyUnit value);
  private:
  ::cc11011::FrequencyUnit _internal_freq_unit() const;
  void _internal_set_freq_unit(::cc11011::FrequencyUnit value);
  public:

  // required float bitrate = 4 [default = 600];
  bool has_bitrate() const;
  private:
  bool _internal_has_bitrate() const;
  public:
  void clear_bitrate();
  float bitrate() const;
  void set_bitrate(float value);
  private:
  float _internal_bitrate() const;
  void _internal_set_bitrate(float value);
  public:

  // required .cc11011.BitrateUnit bitrate_unit = 5 [default = BITRATE_UNIT_KBPS];
  bool has_bitrate_unit() const;
  private:
  bool _internal_has_bitrate_unit() const;
  public:
  void clear_bitrate_unit();
  ::cc11011::BitrateUnit bitrate_unit() const;
  void set_bitrate_unit(::cc11011::BitrateUnit value);
  private:
  ::cc11011::BitrateUnit _internal_bitrate_unit() const;
  void _internal_set_bitrate_unit(::cc11011::BitrateUnit value);
  public:

  // optional .cc11011.PowerSetting power = 8 [default = POWER_SETTING_SEVEN_DBM];
  bool has_power() const;
  private:
  bool _internal_has_power() const;
  public:
  void clear_power();
  ::cc11011::PowerSetting power() const;
  void set_power(::cc11011::PowerSetting value);
  private:
  ::cc11011::PowerSetting _internal_power() const;
  void _internal_set_power(::cc11011::PowerSetting value);
  public:

  // optional .cc11011.Modulation modulation = 9 [default = MODULATION_TYPE_ASK];
  bool has_modulation() const;
  private:
  bool _internal_has_modulation() const;
  public:
  void clear_modulation();
  ::cc11011::Modulation modulation() const;
  void set_modulation(::cc11011::Modulation value);
  private:
  ::cc11011::Modulation _internal_modulation() const;
  void _internal_set_modulation(::cc11011::Modulation value);
  public:

  // @@protoc_insertion_point(class_scope:cc11011.Signal)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cc11011::Message > messages_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
    ::cc11011::Node* node_address_;
    float deviation_;
    float rx_bw_;
    bool enable_carrier_sense_;
    bool enable_ook_;
    bool enable_crc_filtering_;
    int32_t data_shaping_;
    int encoding_;
    float freq_;
    int freq_unit_;
    float bitrate_;
    int bitrate_unit_;
    int power_;
    int modulation_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cc1101_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message

// optional int32 beginning_pause_ms = 1 [default = 0];
inline bool Message::_internal_has_beginning_pause_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Message::has_beginning_pause_ms() const {
  return _internal_has_beginning_pause_ms();
}
inline void Message::clear_beginning_pause_ms() {
  _impl_.beginning_pause_ms_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t Message::_internal_beginning_pause_ms() const {
  return _impl_.beginning_pause_ms_;
}
inline int32_t Message::beginning_pause_ms() const {
  // @@protoc_insertion_point(field_get:cc11011.Message.beginning_pause_ms)
  return _internal_beginning_pause_ms();
}
inline void Message::_internal_set_beginning_pause_ms(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.beginning_pause_ms_ = value;
}
inline void Message::set_beginning_pause_ms(int32_t value) {
  _internal_set_beginning_pause_ms(value);
  // @@protoc_insertion_point(field_set:cc11011.Message.beginning_pause_ms)
}

// optional int32 end_pause_ms = 2 [default = 0];
inline bool Message::_internal_has_end_pause_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Message::has_end_pause_ms() const {
  return _internal_has_end_pause_ms();
}
inline void Message::clear_end_pause_ms() {
  _impl_.end_pause_ms_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t Message::_internal_end_pause_ms() const {
  return _impl_.end_pause_ms_;
}
inline int32_t Message::end_pause_ms() const {
  // @@protoc_insertion_point(field_get:cc11011.Message.end_pause_ms)
  return _internal_end_pause_ms();
}
inline void Message::_internal_set_end_pause_ms(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.end_pause_ms_ = value;
}
inline void Message::set_end_pause_ms(int32_t value) {
  _internal_set_end_pause_ms(value);
  // @@protoc_insertion_point(field_set:cc11011.Message.end_pause_ms)
}

// repeated int32 data = 3;
inline int Message::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int Message::data_size() const {
  return _internal_data_size();
}
inline void Message::clear_data() {
  _impl_.data_.Clear();
}
inline int32_t Message::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline int32_t Message::data(int index) const {
  // @@protoc_insertion_point(field_get:cc11011.Message.data)
  return _internal_data(index);
}
inline void Message::set_data(int index, int32_t value) {
  _impl_.data_.Set(index, value);
  // @@protoc_insertion_point(field_set:cc11011.Message.data)
}
inline void Message::_internal_add_data(int32_t value) {
  _impl_.data_.Add(value);
}
inline void Message::add_data(int32_t value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:cc11011.Message.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Message::_internal_data() const {
  return _impl_.data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Message::data() const {
  // @@protoc_insertion_point(field_list:cc11011.Message.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Message::_internal_mutable_data() {
  return &_impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Message::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:cc11011.Message.data)
  return _internal_mutable_data();
}

// required int32 length = 4 [default = 0];
inline bool Message::_internal_has_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Message::has_length() const {
  return _internal_has_length();
}
inline void Message::clear_length() {
  _impl_.length_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t Message::_internal_length() const {
  return _impl_.length_;
}
inline int32_t Message::length() const {
  // @@protoc_insertion_point(field_get:cc11011.Message.length)
  return _internal_length();
}
inline void Message::_internal_set_length(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.length_ = value;
}
inline void Message::set_length(int32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:cc11011.Message.length)
}

// -------------------------------------------------------------------

// SyncWord

// repeated int32 data = 1;
inline int SyncWord::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int SyncWord::data_size() const {
  return _internal_data_size();
}
inline void SyncWord::clear_data() {
  _impl_.data_.Clear();
}
inline int32_t SyncWord::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline int32_t SyncWord::data(int index) const {
  // @@protoc_insertion_point(field_get:cc11011.SyncWord.data)
  return _internal_data(index);
}
inline void SyncWord::set_data(int index, int32_t value) {
  _impl_.data_.Set(index, value);
  // @@protoc_insertion_point(field_set:cc11011.SyncWord.data)
}
inline void SyncWord::_internal_add_data(int32_t value) {
  _impl_.data_.Add(value);
}
inline void SyncWord::add_data(int32_t value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:cc11011.SyncWord.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SyncWord::_internal_data() const {
  return _impl_.data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SyncWord::data() const {
  // @@protoc_insertion_point(field_list:cc11011.SyncWord.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SyncWord::_internal_mutable_data() {
  return &_impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SyncWord::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:cc11011.SyncWord.data)
  return _internal_mutable_data();
}

// required int32 length = 2;
inline bool SyncWord::_internal_has_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SyncWord::has_length() const {
  return _internal_has_length();
}
inline void SyncWord::clear_length() {
  _impl_.length_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t SyncWord::_internal_length() const {
  return _impl_.length_;
}
inline int32_t SyncWord::length() const {
  // @@protoc_insertion_point(field_get:cc11011.SyncWord.length)
  return _internal_length();
}
inline void SyncWord::_internal_set_length(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.length_ = value;
}
inline void SyncWord::set_length(int32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:cc11011.SyncWord.length)
}

// optional int32 max_err_bits = 3;
inline bool SyncWord::_internal_has_max_err_bits() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SyncWord::has_max_err_bits() const {
  return _internal_has_max_err_bits();
}
inline void SyncWord::clear_max_err_bits() {
  _impl_.max_err_bits_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t SyncWord::_internal_max_err_bits() const {
  return _impl_.max_err_bits_;
}
inline int32_t SyncWord::max_err_bits() const {
  // @@protoc_insertion_point(field_get:cc11011.SyncWord.max_err_bits)
  return _internal_max_err_bits();
}
inline void SyncWord::_internal_set_max_err_bits(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.max_err_bits_ = value;
}
inline void SyncWord::set_max_err_bits(int32_t value) {
  _internal_set_max_err_bits(value);
  // @@protoc_insertion_point(field_set:cc11011.SyncWord.max_err_bits)
}

// -------------------------------------------------------------------

// Node

// repeated int32 addresses = 1;
inline int Node::_internal_addresses_size() const {
  return _impl_.addresses_.size();
}
inline int Node::addresses_size() const {
  return _internal_addresses_size();
}
inline void Node::clear_addresses() {
  _impl_.addresses_.Clear();
}
inline int32_t Node::_internal_addresses(int index) const {
  return _impl_.addresses_.Get(index);
}
inline int32_t Node::addresses(int index) const {
  // @@protoc_insertion_point(field_get:cc11011.Node.addresses)
  return _internal_addresses(index);
}
inline void Node::set_addresses(int index, int32_t value) {
  _impl_.addresses_.Set(index, value);
  // @@protoc_insertion_point(field_set:cc11011.Node.addresses)
}
inline void Node::_internal_add_addresses(int32_t value) {
  _impl_.addresses_.Add(value);
}
inline void Node::add_addresses(int32_t value) {
  _internal_add_addresses(value);
  // @@protoc_insertion_point(field_add:cc11011.Node.addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Node::_internal_addresses() const {
  return _impl_.addresses_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Node::addresses() const {
  // @@protoc_insertion_point(field_list:cc11011.Node.addresses)
  return _internal_addresses();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Node::_internal_mutable_addresses() {
  return &_impl_.addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Node::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:cc11011.Node.addresses)
  return _internal_mutable_addresses();
}

// required int32 num_broadcast_addrs = 2 [default = 0];
inline bool Node::_internal_has_num_broadcast_addrs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Node::has_num_broadcast_addrs() const {
  return _internal_has_num_broadcast_addrs();
}
inline void Node::clear_num_broadcast_addrs() {
  _impl_.num_broadcast_addrs_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t Node::_internal_num_broadcast_addrs() const {
  return _impl_.num_broadcast_addrs_;
}
inline int32_t Node::num_broadcast_addrs() const {
  // @@protoc_insertion_point(field_get:cc11011.Node.num_broadcast_addrs)
  return _internal_num_broadcast_addrs();
}
inline void Node::_internal_set_num_broadcast_addrs(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.num_broadcast_addrs_ = value;
}
inline void Node::set_num_broadcast_addrs(int32_t value) {
  _internal_set_num_broadcast_addrs(value);
  // @@protoc_insertion_point(field_set:cc11011.Node.num_broadcast_addrs)
}

// -------------------------------------------------------------------

// Signal

// required string name = 1 [default = "default_signal"];
inline bool Signal::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Signal::has_name() const {
  return _internal_has_name();
}
inline void Signal::clear_name() {
  _impl_.name_.ClearToDefault(::cc11011::Signal::Impl_::_i_give_permission_to_break_this_code_default_name_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Signal::name() const {
  // @@protoc_insertion_point(field_get:cc11011.Signal.name)
  if (_impl_.name_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_name_.get();
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Signal::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cc11011.Signal.name)
}
inline std::string* Signal::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cc11011.Signal.name)
  return _s;
}
inline const std::string& Signal::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Signal::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Signal::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(::cc11011::Signal::Impl_::_i_give_permission_to_break_this_code_default_name_, GetArenaForAllocation());
}
inline std::string* Signal::release_name() {
  // @@protoc_insertion_point(field_release:cc11011.Signal.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
  return p;
}
inline void Signal::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:cc11011.Signal.name)
}

// required float freq = 2 [default = 433.92];
inline bool Signal::_internal_has_freq() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Signal::has_freq() const {
  return _internal_has_freq();
}
inline void Signal::clear_freq() {
  _impl_.freq_ = 433.92f;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float Signal::_internal_freq() const {
  return _impl_.freq_;
}
inline float Signal::freq() const {
  // @@protoc_insertion_point(field_get:cc11011.Signal.freq)
  return _internal_freq();
}
inline void Signal::_internal_set_freq(float value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.freq_ = value;
}
inline void Signal::set_freq(float value) {
  _internal_set_freq(value);
  // @@protoc_insertion_point(field_set:cc11011.Signal.freq)
}

// required .cc11011.FrequencyUnit freq_unit = 3 [default = FREQUENCY_UNIT_MHZ];
inline bool Signal::_internal_has_freq_unit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Signal::has_freq_unit() const {
  return _internal_has_freq_unit();
}
inline void Signal::clear_freq_unit() {
  _impl_.freq_unit_ = 3;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::cc11011::FrequencyUnit Signal::_internal_freq_unit() const {
  return static_cast< ::cc11011::FrequencyUnit >(_impl_.freq_unit_);
}
inline ::cc11011::FrequencyUnit Signal::freq_unit() const {
  // @@protoc_insertion_point(field_get:cc11011.Signal.freq_unit)
  return _internal_freq_unit();
}
inline void Signal::_internal_set_freq_unit(::cc11011::FrequencyUnit value) {
  assert(::cc11011::FrequencyUnit_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.freq_unit_ = value;
}
inline void Signal::set_freq_unit(::cc11011::FrequencyUnit value) {
  _internal_set_freq_unit(value);
  // @@protoc_insertion_point(field_set:cc11011.Signal.freq_unit)
}

// required float bitrate = 4 [default = 600];
inline bool Signal::_internal_has_bitrate() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Signal::has_bitrate() const {
  return _internal_has_bitrate();
}
inline void Signal::clear_bitrate() {
  _impl_.bitrate_ = 600;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float Signal::_internal_bitrate() const {
  return _impl_.bitrate_;
}
inline float Signal::bitrate() const {
  // @@protoc_insertion_point(field_get:cc11011.Signal.bitrate)
  return _internal_bitrate();
}
inline void Signal::_internal_set_bitrate(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.bitrate_ = value;
}
inline void Signal::set_bitrate(float value) {
  _internal_set_bitrate(value);
  // @@protoc_insertion_point(field_set:cc11011.Signal.bitrate)
}

// required .cc11011.BitrateUnit bitrate_unit = 5 [default = BITRATE_UNIT_KBPS];
inline bool Signal::_internal_has_bitrate_unit() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Signal::has_bitrate_unit() const {
  return _internal_has_bitrate_unit();
}
inline void Signal::clear_bitrate_unit() {
  _impl_.bitrate_unit_ = 2;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::cc11011::BitrateUnit Signal::_internal_bitrate_unit() const {
  return static_cast< ::cc11011::BitrateUnit >(_impl_.bitrate_unit_);
}
inline ::cc11011::BitrateUnit Signal::bitrate_unit() const {
  // @@protoc_insertion_point(field_get:cc11011.Signal.bitrate_unit)
  return _internal_bitrate_unit();
}
inline void Signal::_internal_set_bitrate_unit(::cc11011::BitrateUnit value) {
  assert(::cc11011::BitrateUnit_IsValid(value));
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.bitrate_unit_ = value;
}
inline void Signal::set_bitrate_unit(::cc11011::BitrateUnit value) {
  _internal_set_bitrate_unit(value);
  // @@protoc_insertion_point(field_set:cc11011.Signal.bitrate_unit)
}

// optional float deviation = 6;
inline bool Signal::_internal_has_deviation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Signal::has_deviation() const {
  return _internal_has_deviation();
}
inline void Signal::clear_deviation() {
  _impl_.deviation_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float Signal::_internal_deviation() const {
  return _impl_.deviation_;
}
inline float Signal::deviation() const {
  // @@protoc_insertion_point(field_get:cc11011.Signal.deviation)
  return _internal_deviation();
}
inline void Signal::_internal_set_deviation(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.deviation_ = value;
}
inline void Signal::set_deviation(float value) {
  _internal_set_deviation(value);
  // @@protoc_insertion_point(field_set:cc11011.Signal.deviation)
}

// optional float rx_bw = 7;
inline bool Signal::_internal_has_rx_bw() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Signal::has_rx_bw() const {
  return _internal_has_rx_bw();
}
inline void Signal::clear_rx_bw() {
  _impl_.rx_bw_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float Signal::_internal_rx_bw() const {
  return _impl_.rx_bw_;
}
inline float Signal::rx_bw() const {
  // @@protoc_insertion_point(field_get:cc11011.Signal.rx_bw)
  return _internal_rx_bw();
}
inline void Signal::_internal_set_rx_bw(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.rx_bw_ = value;
}
inline void Signal::set_rx_bw(float value) {
  _internal_set_rx_bw(value);
  // @@protoc_insertion_point(field_set:cc11011.Signal.rx_bw)
}

// optional .cc11011.PowerSetting power = 8 [default = POWER_SETTING_SEVEN_DBM];
inline bool Signal::_internal_has_power() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Signal::has_power() const {
  return _internal_has_power();
}
inline void Signal::clear_power() {
  _impl_.power_ = 7;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::cc11011::PowerSetting Signal::_internal_power() const {
  return static_cast< ::cc11011::PowerSetting >(_impl_.power_);
}
inline ::cc11011::PowerSetting Signal::power() const {
  // @@protoc_insertion_point(field_get:cc11011.Signal.power)
  return _internal_power();
}
inline void Signal::_internal_set_power(::cc11011::PowerSetting value) {
  assert(::cc11011::PowerSetting_IsValid(value));
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.power_ = value;
}
inline void Signal::set_power(::cc11011::PowerSetting value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:cc11011.Signal.power)
}

// optional .cc11011.Modulation modulation = 9 [default = MODULATION_TYPE_ASK];
inline bool Signal::_internal_has_modulation() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Signal::has_modulation() const {
  return _internal_has_modulation();
}
inline void Signal::clear_modulation() {
  _impl_.modulation_ = 1;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::cc11011::Modulation Signal::_internal_modulation() const {
  return static_cast< ::cc11011::Modulation >(_impl_.modulation_);
}
inline ::cc11011::Modulation Signal::modulation() const {
  // @@protoc_insertion_point(field_get:cc11011.Signal.modulation)
  return _internal_modulation();
}
inline void Signal::_internal_set_modulation(::cc11011::Modulation value) {
  assert(::cc11011::Modulation_IsValid(value));
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.modulation_ = value;
}
inline void Signal::set_modulation(::cc11011::Modulation value) {
  _internal_set_modulation(value);
  // @@protoc_insertion_point(field_set:cc11011.Signal.modulation)
}

// repeated .cc11011.Message messages = 10;
inline int Signal::_internal_messages_size() const {
  return _impl_.messages_.size();
}
inline int Signal::messages_size() const {
  return _internal_messages_size();
}
inline void Signal::clear_messages() {
  _impl_.messages_.Clear();
}
inline ::cc11011::Message* Signal::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:cc11011.Signal.messages)
  return _impl_.messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cc11011::Message >*
Signal::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:cc11011.Signal.messages)
  return &_impl_.messages_;
}
inline const ::cc11011::Message& Signal::_internal_messages(int index) const {
  return _impl_.messages_.Get(index);
}
inline const ::cc11011::Message& Signal::messages(int index) const {
  // @@protoc_insertion_point(field_get:cc11011.Signal.messages)
  return _internal_messages(index);
}
inline ::cc11011::Message* Signal::_internal_add_messages() {
  return _impl_.messages_.Add();
}
inline ::cc11011::Message* Signal::add_messages() {
  ::cc11011::Message* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:cc11011.Signal.messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cc11011::Message >&
Signal::messages() const {
  // @@protoc_insertion_point(field_list:cc11011.Signal.messages)
  return _impl_.messages_;
}

// optional .cc11011.EncodingFormat encoding = 11 [default = ENCODING_FORMAT_NRZ];
inline bool Signal::_internal_has_encoding() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Signal::has_encoding() const {
  return _internal_has_encoding();
}
inline void Signal::clear_encoding() {
  _impl_.encoding_ = 1;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::cc11011::EncodingFormat Signal::_internal_encoding() const {
  return static_cast< ::cc11011::EncodingFormat >(_impl_.encoding_);
}
inline ::cc11011::EncodingFormat Signal::encoding() const {
  // @@protoc_insertion_point(field_get:cc11011.Signal.encoding)
  return _internal_encoding();
}
inline void Signal::_internal_set_encoding(::cc11011::EncodingFormat value) {
  assert(::cc11011::EncodingFormat_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.encoding_ = value;
}
inline void Signal::set_encoding(::cc11011::EncodingFormat value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:cc11011.Signal.encoding)
}

// optional bool enable_carrier_sense = 12;
inline bool Signal::_internal_has_enable_carrier_sense() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Signal::has_enable_carrier_sense() const {
  return _internal_has_enable_carrier_sense();
}
inline void Signal::clear_enable_carrier_sense() {
  _impl_.enable_carrier_sense_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool Signal::_internal_enable_carrier_sense() const {
  return _impl_.enable_carrier_sense_;
}
inline bool Signal::enable_carrier_sense() const {
  // @@protoc_insertion_point(field_get:cc11011.Signal.enable_carrier_sense)
  return _internal_enable_carrier_sense();
}
inline void Signal::_internal_set_enable_carrier_sense(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.enable_carrier_sense_ = value;
}
inline void Signal::set_enable_carrier_sense(bool value) {
  _internal_set_enable_carrier_sense(value);
  // @@protoc_insertion_point(field_set:cc11011.Signal.enable_carrier_sense)
}

// optional bool enable_ook = 13;
inline bool Signal::_internal_has_enable_ook() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Signal::has_enable_ook() const {
  return _internal_has_enable_ook();
}
inline void Signal::clear_enable_ook() {
  _impl_.enable_ook_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool Signal::_internal_enable_ook() const {
  return _impl_.enable_ook_;
}
inline bool Signal::enable_ook() const {
  // @@protoc_insertion_point(field_get:cc11011.Signal.enable_ook)
  return _internal_enable_ook();
}
inline void Signal::_internal_set_enable_ook(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.enable_ook_ = value;
}
inline void Signal::set_enable_ook(bool value) {
  _internal_set_enable_ook(value);
  // @@protoc_insertion_point(field_set:cc11011.Signal.enable_ook)
}

// optional bool enable_crc_filtering = 14;
inline bool Signal::_internal_has_enable_crc_filtering() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Signal::has_enable_crc_filtering() const {
  return _internal_has_enable_crc_filtering();
}
inline void Signal::clear_enable_crc_filtering() {
  _impl_.enable_crc_filtering_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool Signal::_internal_enable_crc_filtering() const {
  return _impl_.enable_crc_filtering_;
}
inline bool Signal::enable_crc_filtering() const {
  // @@protoc_insertion_point(field_get:cc11011.Signal.enable_crc_filtering)
  return _internal_enable_crc_filtering();
}
inline void Signal::_internal_set_enable_crc_filtering(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.enable_crc_filtering_ = value;
}
inline void Signal::set_enable_crc_filtering(bool value) {
  _internal_set_enable_crc_filtering(value);
  // @@protoc_insertion_point(field_set:cc11011.Signal.enable_crc_filtering)
}

// optional int32 data_shaping = 15;
inline bool Signal::_internal_has_data_shaping() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Signal::has_data_shaping() const {
  return _internal_has_data_shaping();
}
inline void Signal::clear_data_shaping() {
  _impl_.data_shaping_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t Signal::_internal_data_shaping() const {
  return _impl_.data_shaping_;
}
inline int32_t Signal::data_shaping() const {
  // @@protoc_insertion_point(field_get:cc11011.Signal.data_shaping)
  return _internal_data_shaping();
}
inline void Signal::_internal_set_data_shaping(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.data_shaping_ = value;
}
inline void Signal::set_data_shaping(int32_t value) {
  _internal_set_data_shaping(value);
  // @@protoc_insertion_point(field_set:cc11011.Signal.data_shaping)
}

// optional .cc11011.Node node_address = 16;
inline bool Signal::_internal_has_node_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.node_address_ != nullptr);
  return value;
}
inline bool Signal::has_node_address() const {
  return _internal_has_node_address();
}
inline void Signal::clear_node_address() {
  if (_impl_.node_address_ != nullptr) _impl_.node_address_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::cc11011::Node& Signal::_internal_node_address() const {
  const ::cc11011::Node* p = _impl_.node_address_;
  return p != nullptr ? *p : reinterpret_cast<const ::cc11011::Node&>(
      ::cc11011::_Node_default_instance_);
}
inline const ::cc11011::Node& Signal::node_address() const {
  // @@protoc_insertion_point(field_get:cc11011.Signal.node_address)
  return _internal_node_address();
}
inline void Signal::unsafe_arena_set_allocated_node_address(
    ::cc11011::Node* node_address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.node_address_);
  }
  _impl_.node_address_ = node_address;
  if (node_address) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cc11011.Signal.node_address)
}
inline ::cc11011::Node* Signal::release_node_address() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cc11011::Node* temp = _impl_.node_address_;
  _impl_.node_address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cc11011::Node* Signal::unsafe_arena_release_node_address() {
  // @@protoc_insertion_point(field_release:cc11011.Signal.node_address)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cc11011::Node* temp = _impl_.node_address_;
  _impl_.node_address_ = nullptr;
  return temp;
}
inline ::cc11011::Node* Signal::_internal_mutable_node_address() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.node_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::cc11011::Node>(GetArenaForAllocation());
    _impl_.node_address_ = p;
  }
  return _impl_.node_address_;
}
inline ::cc11011::Node* Signal::mutable_node_address() {
  ::cc11011::Node* _msg = _internal_mutable_node_address();
  // @@protoc_insertion_point(field_mutable:cc11011.Signal.node_address)
  return _msg;
}
inline void Signal::set_allocated_node_address(::cc11011::Node* node_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.node_address_;
  }
  if (node_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(node_address);
    if (message_arena != submessage_arena) {
      node_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_address, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.node_address_ = node_address;
  // @@protoc_insertion_point(field_set_allocated:cc11011.Signal.node_address)
}

// optional string comment = 17;
inline bool Signal::_internal_has_comment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Signal::has_comment() const {
  return _internal_has_comment();
}
inline void Signal::clear_comment() {
  _impl_.comment_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Signal::comment() const {
  // @@protoc_insertion_point(field_get:cc11011.Signal.comment)
  return _internal_comment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Signal::set_comment(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.comment_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cc11011.Signal.comment)
}
inline std::string* Signal::mutable_comment() {
  std::string* _s = _internal_mutable_comment();
  // @@protoc_insertion_point(field_mutable:cc11011.Signal.comment)
  return _s;
}
inline const std::string& Signal::_internal_comment() const {
  return _impl_.comment_.Get();
}
inline void Signal::_internal_set_comment(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.comment_.Set(value, GetArenaForAllocation());
}
inline std::string* Signal::_internal_mutable_comment() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.comment_.Mutable(GetArenaForAllocation());
}
inline std::string* Signal::release_comment() {
  // @@protoc_insertion_point(field_release:cc11011.Signal.comment)
  if (!_internal_has_comment()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.comment_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.comment_.IsDefault()) {
    _impl_.comment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Signal::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.comment_.SetAllocated(comment, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.comment_.IsDefault()) {
    _impl_.comment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cc11011.Signal.comment)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cc11011

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::cc11011::FrequencyUnit> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cc11011::FrequencyUnit>() {
  return ::cc11011::FrequencyUnit_descriptor();
}
template <> struct is_proto_enum< ::cc11011::Modulation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cc11011::Modulation>() {
  return ::cc11011::Modulation_descriptor();
}
template <> struct is_proto_enum< ::cc11011::BitrateUnit> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cc11011::BitrateUnit>() {
  return ::cc11011::BitrateUnit_descriptor();
}
template <> struct is_proto_enum< ::cc11011::PowerSetting> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cc11011::PowerSetting>() {
  return ::cc11011::PowerSetting_descriptor();
}
template <> struct is_proto_enum< ::cc11011::EncodingFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cc11011::EncodingFormat>() {
  return ::cc11011::EncodingFormat_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cc1101_2eproto
