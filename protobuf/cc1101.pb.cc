// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cc1101.proto

#include "cc1101.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cc11011 {
PROTOBUF_CONSTEXPR Message::Message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.beginning_pause_ms_)*/0
  , /*decltype(_impl_.end_pause_ms_)*/0
  , /*decltype(_impl_.length_)*/0} {}
struct MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageDefaultTypeInternal _Message_default_instance_;
PROTOBUF_CONSTEXPR SyncWord::SyncWord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.length_)*/0
  , /*decltype(_impl_.max_err_bits_)*/0} {}
struct SyncWordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncWordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncWordDefaultTypeInternal() {}
  union {
    SyncWord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncWordDefaultTypeInternal _SyncWord_default_instance_;
PROTOBUF_CONSTEXPR Node::Node(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.addresses_)*/{}
  , /*decltype(_impl_.num_broadcast_addrs_)*/0} {}
struct NodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeDefaultTypeInternal() {}
  union {
    Node _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeDefaultTypeInternal _Node_default_instance_;
PROTOBUF_CONSTEXPR Signal::Signal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.messages_)*/{}
  , /*decltype(_impl_.name_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.comment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.node_address_)*/nullptr
  , /*decltype(_impl_.deviation_)*/0
  , /*decltype(_impl_.rx_bw_)*/0
  , /*decltype(_impl_.enable_carrier_sense_)*/false
  , /*decltype(_impl_.enable_ook_)*/false
  , /*decltype(_impl_.enable_crc_filtering_)*/false
  , /*decltype(_impl_.data_shaping_)*/0
  , /*decltype(_impl_.encoding_)*/1
  , /*decltype(_impl_.freq_)*/433.92f
  , /*decltype(_impl_.freq_unit_)*/3
  , /*decltype(_impl_.bitrate_)*/600
  , /*decltype(_impl_.bitrate_unit_)*/2
  , /*decltype(_impl_.power_)*/7
  , /*decltype(_impl_.modulation_)*/1} {}
struct SignalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignalDefaultTypeInternal() {}
  union {
    Signal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignalDefaultTypeInternal _Signal_default_instance_;
}  // namespace cc11011
static ::_pb::Metadata file_level_metadata_cc1101_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_cc1101_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cc1101_2eproto = nullptr;

const uint32_t TableStruct_cc1101_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::cc11011::Message, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cc11011::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cc11011::Message, _impl_.beginning_pause_ms_),
  PROTOBUF_FIELD_OFFSET(::cc11011::Message, _impl_.end_pause_ms_),
  PROTOBUF_FIELD_OFFSET(::cc11011::Message, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::cc11011::Message, _impl_.length_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::cc11011::SyncWord, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cc11011::SyncWord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cc11011::SyncWord, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::cc11011::SyncWord, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::cc11011::SyncWord, _impl_.max_err_bits_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::cc11011::Node, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cc11011::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cc11011::Node, _impl_.addresses_),
  PROTOBUF_FIELD_OFFSET(::cc11011::Node, _impl_.num_broadcast_addrs_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::cc11011::Signal, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::cc11011::Signal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cc11011::Signal, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::cc11011::Signal, _impl_.freq_),
  PROTOBUF_FIELD_OFFSET(::cc11011::Signal, _impl_.freq_unit_),
  PROTOBUF_FIELD_OFFSET(::cc11011::Signal, _impl_.bitrate_),
  PROTOBUF_FIELD_OFFSET(::cc11011::Signal, _impl_.bitrate_unit_),
  PROTOBUF_FIELD_OFFSET(::cc11011::Signal, _impl_.deviation_),
  PROTOBUF_FIELD_OFFSET(::cc11011::Signal, _impl_.rx_bw_),
  PROTOBUF_FIELD_OFFSET(::cc11011::Signal, _impl_.power_),
  PROTOBUF_FIELD_OFFSET(::cc11011::Signal, _impl_.modulation_),
  PROTOBUF_FIELD_OFFSET(::cc11011::Signal, _impl_.messages_),
  PROTOBUF_FIELD_OFFSET(::cc11011::Signal, _impl_.encoding_),
  PROTOBUF_FIELD_OFFSET(::cc11011::Signal, _impl_.enable_carrier_sense_),
  PROTOBUF_FIELD_OFFSET(::cc11011::Signal, _impl_.enable_ook_),
  PROTOBUF_FIELD_OFFSET(::cc11011::Signal, _impl_.enable_crc_filtering_),
  PROTOBUF_FIELD_OFFSET(::cc11011::Signal, _impl_.data_shaping_),
  PROTOBUF_FIELD_OFFSET(::cc11011::Signal, _impl_.node_address_),
  PROTOBUF_FIELD_OFFSET(::cc11011::Signal, _impl_.comment_),
  0,
  10,
  11,
  12,
  13,
  3,
  4,
  14,
  15,
  ~0u,
  9,
  5,
  6,
  7,
  8,
  2,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::cc11011::Message)},
  { 14, 23, -1, sizeof(::cc11011::SyncWord)},
  { 26, 34, -1, sizeof(::cc11011::Node)},
  { 36, 59, -1, sizeof(::cc11011::Signal)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::cc11011::_Message_default_instance_._instance,
  &::cc11011::_SyncWord_default_instance_._instance,
  &::cc11011::_Node_default_instance_._instance,
  &::cc11011::_Signal_default_instance_._instance,
};

const char descriptor_table_protodef_cc1101_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014cc1101.proto\022\007cc11011\"b\n\007Message\022\035\n\022be"
  "ginning_pause_ms\030\001 \001(\005:\0010\022\027\n\014end_pause_m"
  "s\030\002 \001(\005:\0010\022\014\n\004data\030\003 \003(\005\022\021\n\006length\030\004 \002(\005"
  ":\0010\">\n\010SyncWord\022\014\n\004data\030\001 \003(\005\022\016\n\006length\030"
  "\002 \002(\005\022\024\n\014max_err_bits\030\003 \001(\005\"9\n\004Node\022\021\n\ta"
  "ddresses\030\001 \003(\005\022\036\n\023num_broadcast_addrs\030\002 "
  "\002(\005:\0010\"\357\004\n\006Signal\022\034\n\004name\030\001 \002(\t:\016default"
  "_signal\022\024\n\004freq\030\002 \002(\002:\006433.92\022=\n\tfreq_un"
  "it\030\003 \002(\0162\026.cc11011.FrequencyUnit:\022FREQUE"
  "NCY_UNIT_MHZ\022\024\n\007bitrate\030\004 \002(\002:\003600\022=\n\014bi"
  "trate_unit\030\005 \002(\0162\024.cc11011.BitrateUnit:\021"
  "BITRATE_UNIT_KBPS\022\021\n\tdeviation\030\006 \001(\002\022\r\n\005"
  "rx_bw\030\007 \001(\002\022=\n\005power\030\010 \001(\0162\025.cc11011.Pow"
  "erSetting:\027POWER_SETTING_SEVEN_DBM\022<\n\nmo"
  "dulation\030\t \001(\0162\023.cc11011.Modulation:\023MOD"
  "ULATION_TYPE_ASK\022\"\n\010messages\030\n \003(\0132\020.cc1"
  "1011.Message\022>\n\010encoding\030\013 \001(\0162\027.cc11011"
  ".EncodingFormat:\023ENCODING_FORMAT_NRZ\022\034\n\024"
  "enable_carrier_sense\030\014 \001(\010\022\022\n\nenable_ook"
  "\030\r \001(\010\022\034\n\024enable_crc_filtering\030\016 \001(\010\022\024\n\014"
  "data_shaping\030\017 \001(\005\022#\n\014node_address\030\020 \001(\013"
  "2\r.cc11011.Node\022\017\n\007comment\030\021 \001(\t*\216\001\n\rFre"
  "quencyUnit\022\036\n\032FREQUENCY_UNIT_UNSPECIFIED"
  "\020\000\022\025\n\021FREQUENCY_UNIT_HZ\020\001\022\026\n\022FREQUENCY_U"
  "NIT_KHZ\020\002\022\026\n\022FREQUENCY_UNIT_MHZ\020\003\022\026\n\022FRE"
  "QUENCY_UNIT_GHZ\020\004*x\n\nModulation\022\037\n\033MODUL"
  "ATION_TYPE_UNSPECIFIED\020\000\022\027\n\023MODULATION_T"
  "YPE_ASK\020\001\022\027\n\023MODULATION_TYPE_FSK\020\002\022\027\n\023MO"
  "DULATION_TYPE_PSK\020\003*o\n\013BitrateUnit\022\034\n\030BI"
  "TRATE_UNIT_UNSPECIFIED\020\000\022\024\n\020BITRATE_UNIT"
  "_BPS\020\001\022\025\n\021BITRATE_UNIT_KBPS\020\002\022\025\n\021BITRATE"
  "_UNIT_MBPS\020\003*\235\002\n\014PowerSetting\022\035\n\031POWER_S"
  "ETTING_UNSPECIFIED\020\000\022\036\n\032POWER_SETTING_MI"
  "NUS_30_DBM\020\001\022\036\n\032POWER_SETTING_MINUS_20_D"
  "BM\020\002\022\036\n\032POWER_SETTING_MINUS_15_DBM\020\003\022\036\n\032"
  "POWER_SETTING_MINUS_10_DBM\020\004\022\032\n\026POWER_SE"
  "TTING_ZERO_DBM\020\005\022\032\n\026POWER_SETTING_FIVE_D"
  "BM\020\006\022\033\n\027POWER_SETTING_SEVEN_DBM\020\007\022\031\n\025POW"
  "ER_SETTING_TEN_DBM\020\010*\362\001\n\016EncodingFormat\022"
  "\037\n\033ENCODING_FORMAT_UNSPECIFIED\020\000\022\027\n\023ENCO"
  "DING_FORMAT_NRZ\020\001\022\036\n\032ENCODING_FORMAT_NRZ"
  "_INVERT\020\002\022 \n\034ENCODING_FORMAT_MANCHESTER_"
  "1\020\003\022 \n\034ENCODING_FORMAT_MANCHESTER_2\020\004\022#\n"
  "\037ENCODING_FORMAT_DIFF_MANCHESTER\020\005\022\035\n\031EN"
  "CODING_FORMAT_WHITENING\020\006"
  ;
static ::_pbi::once_flag descriptor_table_cc1101_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cc1101_2eproto = {
    false, false, 1785, descriptor_table_protodef_cc1101_2eproto,
    "cc1101.proto",
    &descriptor_table_cc1101_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_cc1101_2eproto::offsets,
    file_level_metadata_cc1101_2eproto, file_level_enum_descriptors_cc1101_2eproto,
    file_level_service_descriptors_cc1101_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cc1101_2eproto_getter() {
  return &descriptor_table_cc1101_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cc1101_2eproto(&descriptor_table_cc1101_2eproto);
namespace cc11011 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FrequencyUnit_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cc1101_2eproto);
  return file_level_enum_descriptors_cc1101_2eproto[0];
}
bool FrequencyUnit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Modulation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cc1101_2eproto);
  return file_level_enum_descriptors_cc1101_2eproto[1];
}
bool Modulation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BitrateUnit_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cc1101_2eproto);
  return file_level_enum_descriptors_cc1101_2eproto[2];
}
bool BitrateUnit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PowerSetting_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cc1101_2eproto);
  return file_level_enum_descriptors_cc1101_2eproto[3];
}
bool PowerSetting_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EncodingFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cc1101_2eproto);
  return file_level_enum_descriptors_cc1101_2eproto[4];
}
bool EncodingFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Message::_Internal {
 public:
  using HasBits = decltype(std::declval<Message>()._impl_._has_bits_);
  static void set_has_beginning_pause_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_pause_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cc11011.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.beginning_pause_ms_){}
    , decltype(_impl_.end_pause_ms_){}
    , decltype(_impl_.length_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.beginning_pause_ms_, &from._impl_.beginning_pause_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.length_) -
    reinterpret_cast<char*>(&_impl_.beginning_pause_ms_)) + sizeof(_impl_.length_));
  // @@protoc_insertion_point(copy_constructor:cc11011.Message)
}

inline void Message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){arena}
    , decltype(_impl_.beginning_pause_ms_){0}
    , decltype(_impl_.end_pause_ms_){0}
    , decltype(_impl_.length_){0}
  };
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:cc11011.Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
}

void Message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:cc11011.Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.beginning_pause_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.length_) -
        reinterpret_cast<char*>(&_impl_.beginning_pause_ms_)) + sizeof(_impl_.length_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 beginning_pause_ms = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_beginning_pause_ms(&has_bits);
          _impl_.beginning_pause_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 end_pause_ms = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_end_pause_ms(&has_bits);
          _impl_.end_pause_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 length = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_length(&has_bits);
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cc11011.Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 beginning_pause_ms = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_beginning_pause_ms(), target);
  }

  // optional int32 end_pause_ms = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_end_pause_ms(), target);
  }

  // repeated int32 data = 3;
  for (int i = 0, n = this->_internal_data_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_data(i), target);
  }

  // required int32 length = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cc11011.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cc11011.Message)
  size_t total_size = 0;

  // required int32 length = 4 [default = 0];
  if (_internal_has_length()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_length());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 data = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.data_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_data_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 beginning_pause_ms = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_beginning_pause_ms());
    }

    // optional int32 end_pause_ms = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_end_pause_ms());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }


void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message*>(&to_msg);
  auto& from = static_cast<const Message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cc11011.Message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.beginning_pause_ms_ = from._impl_.beginning_pause_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.end_pause_ms_ = from._impl_.end_pause_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.length_ = from._impl_.length_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cc11011.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message, _impl_.length_)
      + sizeof(Message::_impl_.length_)
      - PROTOBUF_FIELD_OFFSET(Message, _impl_.beginning_pause_ms_)>(
          reinterpret_cast<char*>(&_impl_.beginning_pause_ms_),
          reinterpret_cast<char*>(&other->_impl_.beginning_pause_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cc1101_2eproto_getter, &descriptor_table_cc1101_2eproto_once,
      file_level_metadata_cc1101_2eproto[0]);
}

// ===================================================================

class SyncWord::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncWord>()._impl_._has_bits_);
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_err_bits(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SyncWord::SyncWord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cc11011.SyncWord)
}
SyncWord::SyncWord(const SyncWord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncWord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.length_){}
    , decltype(_impl_.max_err_bits_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.length_, &from._impl_.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_err_bits_) -
    reinterpret_cast<char*>(&_impl_.length_)) + sizeof(_impl_.max_err_bits_));
  // @@protoc_insertion_point(copy_constructor:cc11011.SyncWord)
}

inline void SyncWord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){arena}
    , decltype(_impl_.length_){0}
    , decltype(_impl_.max_err_bits_){0}
  };
}

SyncWord::~SyncWord() {
  // @@protoc_insertion_point(destructor:cc11011.SyncWord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncWord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
}

void SyncWord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncWord::Clear() {
// @@protoc_insertion_point(message_clear_start:cc11011.SyncWord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.max_err_bits_) -
        reinterpret_cast<char*>(&_impl_.length_)) + sizeof(_impl_.max_err_bits_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncWord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_length(&has_bits);
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_err_bits = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_max_err_bits(&has_bits);
          _impl_.max_err_bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncWord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cc11011.SyncWord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 data = 1;
  for (int i = 0, n = this->_internal_data_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_data(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 length = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_length(), target);
  }

  // optional int32 max_err_bits = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_err_bits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cc11011.SyncWord)
  return target;
}

size_t SyncWord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cc11011.SyncWord)
  size_t total_size = 0;

  // required int32 length = 2;
  if (_internal_has_length()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_length());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 data = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.data_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_data_size());
    total_size += data_size;
  }

  // optional int32 max_err_bits = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_err_bits());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncWord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncWord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncWord::GetClassData() const { return &_class_data_; }


void SyncWord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncWord*>(&to_msg);
  auto& from = static_cast<const SyncWord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cc11011.SyncWord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.length_ = from._impl_.length_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.max_err_bits_ = from._impl_.max_err_bits_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncWord::CopyFrom(const SyncWord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cc11011.SyncWord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncWord::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SyncWord::InternalSwap(SyncWord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncWord, _impl_.max_err_bits_)
      + sizeof(SyncWord::_impl_.max_err_bits_)
      - PROTOBUF_FIELD_OFFSET(SyncWord, _impl_.length_)>(
          reinterpret_cast<char*>(&_impl_.length_),
          reinterpret_cast<char*>(&other->_impl_.length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncWord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cc1101_2eproto_getter, &descriptor_table_cc1101_2eproto_once,
      file_level_metadata_cc1101_2eproto[1]);
}

// ===================================================================

class Node::_Internal {
 public:
  using HasBits = decltype(std::declval<Node>()._impl_._has_bits_);
  static void set_has_num_broadcast_addrs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Node::Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cc11011.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Node* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.addresses_){from._impl_.addresses_}
    , decltype(_impl_.num_broadcast_addrs_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.num_broadcast_addrs_ = from._impl_.num_broadcast_addrs_;
  // @@protoc_insertion_point(copy_constructor:cc11011.Node)
}

inline void Node::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.addresses_){arena}
    , decltype(_impl_.num_broadcast_addrs_){0}
  };
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:cc11011.Node)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Node::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.addresses_.~RepeatedField();
}

void Node::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:cc11011.Node)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.addresses_.Clear();
  _impl_.num_broadcast_addrs_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Node::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 addresses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_addresses(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_addresses(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 num_broadcast_addrs = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_broadcast_addrs(&has_bits);
          _impl_.num_broadcast_addrs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Node::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cc11011.Node)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 addresses = 1;
  for (int i = 0, n = this->_internal_addresses_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_addresses(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 num_broadcast_addrs = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_broadcast_addrs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cc11011.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cc11011.Node)
  size_t total_size = 0;

  // required int32 num_broadcast_addrs = 2 [default = 0];
  if (_internal_has_num_broadcast_addrs()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_broadcast_addrs());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 addresses = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.addresses_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_addresses_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Node::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Node::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Node::GetClassData() const { return &_class_data_; }


void Node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Node*>(&to_msg);
  auto& from = static_cast<const Node&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cc11011.Node)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.addresses_.MergeFrom(from._impl_.addresses_);
  if (from._internal_has_num_broadcast_addrs()) {
    _this->_internal_set_num_broadcast_addrs(from._internal_num_broadcast_addrs());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cc11011.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.addresses_.InternalSwap(&other->_impl_.addresses_);
  swap(_impl_.num_broadcast_addrs_, other->_impl_.num_broadcast_addrs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cc1101_2eproto_getter, &descriptor_table_cc1101_2eproto_once,
      file_level_metadata_cc1101_2eproto[2]);
}

// ===================================================================

class Signal::_Internal {
 public:
  using HasBits = decltype(std::declval<Signal>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_freq_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_bitrate(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_bitrate_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_deviation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rx_bw(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_power(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_modulation(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_encoding(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_enable_carrier_sense(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_enable_ook(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_enable_crc_filtering(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_data_shaping(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::cc11011::Node& node_address(const Signal* msg);
  static void set_has_node_address(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00003c01) ^ 0x00003c01) != 0;
  }
};

const ::cc11011::Node&
Signal::_Internal::node_address(const Signal* msg) {
  return *msg->_impl_.node_address_;
}
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString Signal::Impl_::_i_give_permission_to_break_this_code_default_name_{{{"default_signal", 14}}, {nullptr}};
Signal::Signal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cc11011.Signal)
}
Signal::Signal(const Signal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Signal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messages_){from._impl_.messages_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.comment_){}
    , decltype(_impl_.node_address_){nullptr}
    , decltype(_impl_.deviation_){}
    , decltype(_impl_.rx_bw_){}
    , decltype(_impl_.enable_carrier_sense_){}
    , decltype(_impl_.enable_ook_){}
    , decltype(_impl_.enable_crc_filtering_){}
    , decltype(_impl_.data_shaping_){}
    , decltype(_impl_.encoding_){}
    , decltype(_impl_.freq_){}
    , decltype(_impl_.freq_unit_){}
    , decltype(_impl_.bitrate_){}
    , decltype(_impl_.bitrate_unit_){}
    , decltype(_impl_.power_){}
    , decltype(_impl_.modulation_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_comment()) {
    _this->_impl_.comment_.Set(from._internal_comment(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_node_address()) {
    _this->_impl_.node_address_ = new ::cc11011::Node(*from._impl_.node_address_);
  }
  ::memcpy(&_impl_.deviation_, &from._impl_.deviation_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.modulation_) -
    reinterpret_cast<char*>(&_impl_.deviation_)) + sizeof(_impl_.modulation_));
  // @@protoc_insertion_point(copy_constructor:cc11011.Signal)
}

inline void Signal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messages_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.comment_){}
    , decltype(_impl_.node_address_){nullptr}
    , decltype(_impl_.deviation_){0}
    , decltype(_impl_.rx_bw_){0}
    , decltype(_impl_.enable_carrier_sense_){false}
    , decltype(_impl_.enable_ook_){false}
    , decltype(_impl_.enable_crc_filtering_){false}
    , decltype(_impl_.data_shaping_){0}
    , decltype(_impl_.encoding_){1}
    , decltype(_impl_.freq_){433.92f}
    , decltype(_impl_.freq_unit_){3}
    , decltype(_impl_.bitrate_){600}
    , decltype(_impl_.bitrate_unit_){2}
    , decltype(_impl_.power_){7}
    , decltype(_impl_.modulation_){1}
  };
  _impl_.name_.InitDefault();
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Signal::~Signal() {
  // @@protoc_insertion_point(destructor:cc11011.Signal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Signal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messages_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.comment_.Destroy();
  if (this != internal_default_instance()) delete _impl_.node_address_;
}

void Signal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Signal::Clear() {
// @@protoc_insertion_point(message_clear_start:cc11011.Signal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messages_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearToDefault(::cc11011::Signal::Impl_::_i_give_permission_to_break_this_code_default_name_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      _impl_.comment_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.node_address_ != nullptr);
      _impl_.node_address_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.deviation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.enable_crc_filtering_) -
        reinterpret_cast<char*>(&_impl_.deviation_)) + sizeof(_impl_.enable_crc_filtering_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    _impl_.data_shaping_ = 0;
    _impl_.encoding_ = 1;
    _impl_.freq_ = 433.92f;
    _impl_.freq_unit_ = 3;
    _impl_.bitrate_ = 600;
    _impl_.bitrate_unit_ = 2;
    _impl_.power_ = 7;
    _impl_.modulation_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Signal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1 [default = "default_signal"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cc11011.Signal.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required float freq = 2 [default = 433.92];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_freq(&has_bits);
          _impl_.freq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required .cc11011.FrequencyUnit freq_unit = 3 [default = FREQUENCY_UNIT_MHZ];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::cc11011::FrequencyUnit_IsValid(val))) {
            _internal_set_freq_unit(static_cast<::cc11011::FrequencyUnit>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required float bitrate = 4 [default = 600];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_bitrate(&has_bits);
          _impl_.bitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required .cc11011.BitrateUnit bitrate_unit = 5 [default = BITRATE_UNIT_KBPS];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::cc11011::BitrateUnit_IsValid(val))) {
            _internal_set_bitrate_unit(static_cast<::cc11011::BitrateUnit>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional float deviation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_deviation(&has_bits);
          _impl_.deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float rx_bw = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_rx_bw(&has_bits);
          _impl_.rx_bw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .cc11011.PowerSetting power = 8 [default = POWER_SETTING_SEVEN_DBM];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::cc11011::PowerSetting_IsValid(val))) {
            _internal_set_power(static_cast<::cc11011::PowerSetting>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .cc11011.Modulation modulation = 9 [default = MODULATION_TYPE_ASK];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::cc11011::Modulation_IsValid(val))) {
            _internal_set_modulation(static_cast<::cc11011::Modulation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .cc11011.Message messages = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .cc11011.EncodingFormat encoding = 11 [default = ENCODING_FORMAT_NRZ];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::cc11011::EncodingFormat_IsValid(val))) {
            _internal_set_encoding(static_cast<::cc11011::EncodingFormat>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_carrier_sense = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_enable_carrier_sense(&has_bits);
          _impl_.enable_carrier_sense_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_ook = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_enable_ook(&has_bits);
          _impl_.enable_ook_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_crc_filtering = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_enable_crc_filtering(&has_bits);
          _impl_.enable_crc_filtering_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 data_shaping = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_data_shaping(&has_bits);
          _impl_.data_shaping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .cc11011.Node node_address = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_address(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string comment = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_comment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "cc11011.Signal.comment");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Signal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cc11011.Signal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1 [default = "default_signal"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cc11011.Signal.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required float freq = 2 [default = 433.92];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_freq(), target);
  }

  // required .cc11011.FrequencyUnit freq_unit = 3 [default = FREQUENCY_UNIT_MHZ];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_freq_unit(), target);
  }

  // required float bitrate = 4 [default = 600];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_bitrate(), target);
  }

  // required .cc11011.BitrateUnit bitrate_unit = 5 [default = BITRATE_UNIT_KBPS];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_bitrate_unit(), target);
  }

  // optional float deviation = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_deviation(), target);
  }

  // optional float rx_bw = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_rx_bw(), target);
  }

  // optional .cc11011.PowerSetting power = 8 [default = POWER_SETTING_SEVEN_DBM];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_power(), target);
  }

  // optional .cc11011.Modulation modulation = 9 [default = MODULATION_TYPE_ASK];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_modulation(), target);
  }

  // repeated .cc11011.Message messages = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .cc11011.EncodingFormat encoding = 11 [default = ENCODING_FORMAT_NRZ];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_encoding(), target);
  }

  // optional bool enable_carrier_sense = 12;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_enable_carrier_sense(), target);
  }

  // optional bool enable_ook = 13;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_enable_ook(), target);
  }

  // optional bool enable_crc_filtering = 14;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_enable_crc_filtering(), target);
  }

  // optional int32 data_shaping = 15;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_data_shaping(), target);
  }

  // optional .cc11011.Node node_address = 16;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::node_address(this),
        _Internal::node_address(this).GetCachedSize(), target, stream);
  }

  // optional string comment = 17;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cc11011.Signal.comment");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_comment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cc11011.Signal)
  return target;
}

size_t Signal::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cc11011.Signal)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1 [default = "default_signal"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_freq()) {
    // required float freq = 2 [default = 433.92];
    total_size += 1 + 4;
  }

  if (_internal_has_freq_unit()) {
    // required .cc11011.FrequencyUnit freq_unit = 3 [default = FREQUENCY_UNIT_MHZ];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_freq_unit());
  }

  if (_internal_has_bitrate()) {
    // required float bitrate = 4 [default = 600];
    total_size += 1 + 4;
  }

  if (_internal_has_bitrate_unit()) {
    // required .cc11011.BitrateUnit bitrate_unit = 5 [default = BITRATE_UNIT_KBPS];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_bitrate_unit());
  }

  return total_size;
}
size_t Signal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cc11011.Signal)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00003c01) ^ 0x00003c01) == 0) {  // All required fields are present.
    // required string name = 1 [default = "default_signal"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required float freq = 2 [default = 433.92];
    total_size += 1 + 4;

    // required .cc11011.FrequencyUnit freq_unit = 3 [default = FREQUENCY_UNIT_MHZ];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_freq_unit());

    // required float bitrate = 4 [default = 600];
    total_size += 1 + 4;

    // required .cc11011.BitrateUnit bitrate_unit = 5 [default = BITRATE_UNIT_KBPS];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_bitrate_unit());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cc11011.Message messages = 10;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->_impl_.messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional string comment = 17;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_comment());
    }

    // optional .cc11011.Node node_address = 16;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.node_address_);
    }

    // optional float deviation = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float rx_bw = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional bool enable_carrier_sense = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool enable_ook = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool enable_crc_filtering = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 data_shaping = 15;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data_shaping());
    }

    // optional .cc11011.EncodingFormat encoding = 11 [default = ENCODING_FORMAT_NRZ];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_encoding());
    }

  }
  if (cached_has_bits & 0x0000c000u) {
    // optional .cc11011.PowerSetting power = 8 [default = POWER_SETTING_SEVEN_DBM];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_power());
    }

    // optional .cc11011.Modulation modulation = 9 [default = MODULATION_TYPE_ASK];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_modulation());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Signal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Signal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Signal::GetClassData() const { return &_class_data_; }


void Signal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Signal*>(&to_msg);
  auto& from = static_cast<const Signal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cc11011.Signal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.messages_.MergeFrom(from._impl_.messages_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_comment(from._internal_comment());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_node_address()->::cc11011::Node::MergeFrom(
          from._internal_node_address());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.deviation_ = from._impl_.deviation_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.rx_bw_ = from._impl_.rx_bw_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.enable_carrier_sense_ = from._impl_.enable_carrier_sense_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.enable_ook_ = from._impl_.enable_ook_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.enable_crc_filtering_ = from._impl_.enable_crc_filtering_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.data_shaping_ = from._impl_.data_shaping_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.encoding_ = from._impl_.encoding_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.freq_ = from._impl_.freq_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.freq_unit_ = from._impl_.freq_unit_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.bitrate_ = from._impl_.bitrate_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.bitrate_unit_ = from._impl_.bitrate_unit_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.power_ = from._impl_.power_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.modulation_ = from._impl_.modulation_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Signal::CopyFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cc11011.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.messages_))
    return false;
  if (_internal_has_node_address()) {
    if (!_impl_.node_address_->IsInitialized()) return false;
  }
  return true;
}

void Signal::InternalSwap(Signal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.messages_.InternalSwap(&other->_impl_.messages_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comment_, lhs_arena,
      &other->_impl_.comment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Signal, _impl_.data_shaping_)
      + sizeof(Signal::_impl_.data_shaping_)
      - PROTOBUF_FIELD_OFFSET(Signal, _impl_.node_address_)>(
          reinterpret_cast<char*>(&_impl_.node_address_),
          reinterpret_cast<char*>(&other->_impl_.node_address_));
  swap(_impl_.encoding_, other->_impl_.encoding_);
  swap(_impl_.freq_, other->_impl_.freq_);
  swap(_impl_.freq_unit_, other->_impl_.freq_unit_);
  swap(_impl_.bitrate_, other->_impl_.bitrate_);
  swap(_impl_.bitrate_unit_, other->_impl_.bitrate_unit_);
  swap(_impl_.power_, other->_impl_.power_);
  swap(_impl_.modulation_, other->_impl_.modulation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Signal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cc1101_2eproto_getter, &descriptor_table_cc1101_2eproto_once,
      file_level_metadata_cc1101_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace cc11011
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cc11011::Message*
Arena::CreateMaybeMessage< ::cc11011::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cc11011::Message >(arena);
}
template<> PROTOBUF_NOINLINE ::cc11011::SyncWord*
Arena::CreateMaybeMessage< ::cc11011::SyncWord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cc11011::SyncWord >(arena);
}
template<> PROTOBUF_NOINLINE ::cc11011::Node*
Arena::CreateMaybeMessage< ::cc11011::Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cc11011::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::cc11011::Signal*
Arena::CreateMaybeMessage< ::cc11011::Signal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cc11011::Signal >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
